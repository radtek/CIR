<?xml version="1.0"?>
<taskGroup xmlns="http://sd/llblgen/pro/taskGroupElementDefinitions.xsd"
		name="SD.Tasks.Base" isOptional ="true" 
		description="General group of tasks which are the raw base tasks for the available task performers and need configuration to be effectively usable. Use these tasks to build your own presets or other task definitions.">
	<task name="SD.Tasks.Base.CreateAFolder" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" 
		description="Creates a new folder. Set additional parameters for behavior when the folder already exists or to clear an existing folder." isOptional="true">
		<supportedPlatforms/>
		<supportedTemplateGroups/>
		<dependencies/>
		<parameters>
			<parameter name="folderToCreate" defaultValue="FolderName" isOptional="false" description="The folder to create"/>
			<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
			<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
		</parameters>
	</task>
	<task name="SD.Tasks.Base.ConsumeTDLTemplate" 
		assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
		description ="Consumes a TDL template and generates code using that template and the meta-data specified with the emitType parameter."
		isOptional="true">
		<supportedPlatforms/>
		<supportedTemplateGroups/>
		<dependencies/>
		<parameters>
			<parameter name="destinationFolder" defaultValue="FolderName" isOptional="false" description="The folder to generate the code in"/>
			<parameter name="filenameFormat" defaultValue="[elementName].[extension]" isOptional="false" description="The destination file format specification"/>
			<parameter name="templateID" defaultValue="SD_TemplateID" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
			<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
			<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
			<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
		</parameters>
	</task>
	<task name="SD.Tasks.Base.ConsumeLptTemplate" 
		assemblyFilename="SD.LLBLGen.Pro.LptParser.dll" 
		taskPerformerClass="SD.LLBLGen.Pro.LptParser.DotNetTemplateEngine"
		description ="Consumes a .lpt template and generates code using that template and the meta-data specified with the emitType parameter."
		isOptional="true">
		<supportedPlatforms/>
		<supportedTemplateGroups/>
		<dependencies/>
		<parameters>
			<parameter name="destinationFolder" defaultValue="FolderName" isOptional="false" description="The folder to generate the code in"/>
			<parameter name="filenameFormat" defaultValue="[elementName].[extension]" isOptional="false" description="The destination file format specification"/>
			<parameter name="templateID" defaultValue="SD_TemplateID" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
			<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
			<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
			<parameter name="compileOnly" defaultValue="false" isOptional="true" description="Flag to signal if the templates should just be compiled, but not run" valueType="boolean"/>
			<parameter name="debugBuild" defaultValue ="false" isOptional="true" description ="Flag to signal that the templates have to be compiled using a debug compile, so debugging the templates can be done more easily." valueType="boolean"/>
			<parameter name="templateAssemblySourceFileFormat" defaultValue="templatesSource.[extension]" isOptional="true" description="The filename format for the template sourcecode as it's compiled. Use for debugging templates."/>
		</parameters>
	</task>
	<task name="SD.Tasks.Base.GenerateVSNetProject" 
		assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.ProjectFileCreator"
		description="Generates a VS.NET project file in the format specified using the parameters, and fills it with all cached filenames stored in the task cache. Will modify an existing template file, if present, unless stated otherwise using the parameters"
		isOptional="true">
		<supportedPlatforms/>
		<supportedTemplateGroups/>
		<dependencies/>
		<parameters>
			<parameter name="destinationFolder" defaultValue="FolderName" isOptional ="false" description="The folder to generate the project file in."/>
			<parameter name="filenameFormat" defaultValue="[projectName].[extension]proj" isOptional="false" description="The project filename format specification."/>
			<parameter name="templateID" defaultValue="SD_TemplateID" isOptional="false" description="The ID of the template to use for the VS.NET project file" valueType="templateID"/>
			<parameter name="useRootNameSpaceForProjectName" defaultValue="true" isOptional="false" description="Flag to signal if the rootnamespace specified should be used for the project name. If set to false, the property projectName has to be specified with the value to use for project name." valueType="boolean"/>
			<parameter name="alterWhenExistent" defaultValue="true" isOptional="true" description="Flag to signal if an existing project file should be altered or should be left alone." valueType="boolean"/>
			<parameter name="binRootFolder" defaultValue="" isOptional="true" description="The name of the folder to specify inside the generated project file where VS.NET should store the compiled output."/>
			<parameter name="clearFileCacheAfterwards" defaultValue="false" isOptional ="true" description="Flag to signal if the filename cache has to be cleared after this task has been run succesfully." valueType="boolean"/>
			<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
			<parameter name="projectName" defaultValue="" isOptional="true" description="The name to use for the project if useRootNameSpaceForProjectName is set to false or left empty. If projectName has been left empty, the ProjectName property value of the LLBLGen Pro project is used instead, if useRootNameSpaceForProjectname is set to false or left empty."/>
		</parameters>
	</task>
	<taskGroup description="Generic TaskGroup" isOptional="true" name="SD.Tasks.Base.GenericTaskGroup" requiresCleanCache="false">
		<supportedPlatforms/>
		<supportedTemplateGroups/>
		<dependencies/>
	</taskGroup>
</taskGroup>
