<?xml version="1.0"?>
<taskGroup xmlns="http://sd/llblgen/pro/taskGroupElementDefinitions.xsd"
		name="SD.Tasks.Adapter" isOptional ="true" 
		description="General group of tasks which are adapter specific.">
	<supportedPlatforms/>
	<supportedTemplateGroups>
		<templateGroup name="Adapter"/>
	</supportedTemplateGroups>
	<dependencies/>

	<taskGroup name="SD.Tasks.Adapter.DatabaseGeneric" description="Tasks for the database generic part of adapter" isOptional ="true" requiresCleanCache="true">
		<supportedPlatforms/>
		<supportedTemplateGroups>
			<templateGroup name="Adapter"/>
		</supportedTemplateGroups>
		<dependencies/>

		<task name="SD.Tasks.Adapter.DbGenericProjectDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description ="Creates the dbgeneric project folder." isOptional="false">
			<supportedPlatforms/>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="[dbgenericSubFolder]" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.EntityCollectionClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the EntityCollection class. In .NET 2.0 projects used for backwards compatibility and design time databinding." isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="[dbgenericSubFolder]\HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="EntityCollection.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_EntityCollectionAdapterTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.Webservices.WebserviceHelperClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the WebservicesHelper class, required for .NET 2.0 webservices support" isOptional="true">
			<supportedPlatforms>
				<platform name=".NET 2.0"/>
				<platform name=".NET 3.0" />
				<platform name=".NET 3.5" />
			</supportedPlatforms>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="[dbgenericSubFolder]\HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="WebServiceHelper.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_WebServiceHelperTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.VsNetDbGenericProjectFileCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.ProjectFileCreator" 
			description="Generates the database generic VS.NET project file. Be sure to place this at the end of the taskgroup." isOptional="false">
			<supportedPlatforms/>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies/>
			<parameters>
				<parameter name="destinationFolder" defaultValue="" isOptional ="false" description="The folder to generate the project file in, relative to the destination root folder."/>
				<parameter name="filenameFormat" defaultValue="[projectName][dbgenericSuffix].[extension]proj" isOptional="false" description="The project filename format specification."/>
				<parameter name="templateID" defaultValue="SD_VsNet2003AdapterTemplate" isOptional="false" description="The ID of the template to use for the VS.NET project file" valueType="templateID"/>
				<parameter name="useRootNameSpaceForProjectName" defaultValue="true" isOptional="false" description="Flag to signal if the rootnamespace specified should be used for the project name. If set to false or left empty, the property projectName has to be specified with the value to use for project name." valueType="boolean"/>
				<parameter name="alterWhenExistent" defaultValue="true" isOptional="true" description="Flag to signal if an existing project file should be altered or should be left alone." valueType="boolean"/>
				<parameter name="binRootFolder" defaultValue="[dbgenericSubFolder]\" isOptional="true" description="The name of the root folder, relative to the destination root folder, where VS.NET should store the output folders like bin\debug."/>
				<parameter name="clearFileCacheAfterwards" defaultValue="true" isOptional ="true" description="Flag to signal if the filename cache has to be cleared after this task has been run succesfully." valueType="boolean"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="projectName" defaultValue="" isOptional="true" description="The name to use for the project if useRootNameSpaceForProjectName is set to false or left empty. If projectName has been left empty, the ProjectName property value of the LLBLGen Pro project is used instead, if useRootNameSpaceForProjectname is set to false or left empty."/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.CommonBaseClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the CommonBaseClass for entities for Adapter." isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.EntityClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="[dbgenericSubFolder]\EntityClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="CommonEntityBase.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_CommonEntityBaseAdapter" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
	</taskGroup>

	<taskGroup name="SD.Tasks.Adapter.DatabaseSpecific" description="Tasks for the database specific part of adapter" isOptional ="true" requiresCleanCache="true">
		<supportedPlatforms/>
		<supportedTemplateGroups>
			<templateGroup name="Adapter"/>
		</supportedTemplateGroups>
		<dependencies/>

		<task name="SD.Tasks.Adapter.DbSpecificProjectDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description ="Creates the dbspecific project folder." isOptional="false">
			<supportedPlatforms/>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="[dbspecificSubFolder]" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.DataAccessAdapterClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the DataAccessAdapter class" isOptional="false">
			<supportedPlatforms/>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies>
				<dependency name="SD.Tasks.Adapter.DbSpecificProjectDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="[dbspecificSubFolder]" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="DataAccessAdapter.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_DataAccessAdapterTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.VsNetDbSpecificProjectFileCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.ProjectFileCreator" 
			description="Generates the database specific VS.NET project file. Be sure to place this at the end of the taskgroup." isOptional="false">
			<supportedPlatforms/>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies/>
			<parameters>
				<parameter name="destinationFolder" defaultValue="" isOptional ="false" description="The folder to generate the project file in, relative to the destination root folder."/>
				<parameter name="filenameFormat" defaultValue="[projectName][dbspecificSuffix].[extension]proj" isOptional="false" description="The project filename format specification."/>
				<parameter name="templateID" defaultValue="SD_VsNet2003DBSpecificAdapterTemplate" isOptional="false" description="The ID of the template to use for the VS.NET project file" valueType="templateID"/>
				<parameter name="useRootNameSpaceForProjectName" defaultValue="true" isOptional="false" description="Flag to signal if the rootnamespace specified should be used for the project name. If set to false, the property projectName has to be specified with the value to use for project name." valueType="boolean"/>
				<parameter name="alterWhenExistent" defaultValue="true" isOptional="true" description="Flag to signal if an existing project file should be altered or should be left alone." valueType="boolean"/>
				<parameter name="binRootFolder" defaultValue="[dbspecificSubFolder]\" isOptional="true" description="The name of the root folder, relative to the destination root folder, where VS.NET should store the output folders like bin\debug."/>
				<parameter name="clearFileCacheAfterwards" defaultValue="true" isOptional ="true" description="Flag to signal if the filename cache has to be cleared after this task has been run succesfully." valueType="boolean"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="projectName" defaultValue="" isOptional="true" description="The name to use for the project if useRootNameSpaceForProjectName is set to false or left empty. If projectName has been left empty, the ProjectName property value of the LLBLGen Pro project is used instead, if useRootNameSpaceForProjectname is set to false or left empty."/>
			</parameters>
		</task>
	</taskGroup>

	<taskGroup name="SD.Tasks.Adapter.Webservices.SchemaImporter" description="Tasks for the webservices support for .NET 2.0, which requires a SchemaImporter project" isOptional ="true" requiresCleanCache="true">
		<supportedPlatforms>
			<platform name=".NET 2.0"/>
			<platform name=".NET 3.0" />
			<platform name=".NET 3.5" />
		</supportedPlatforms>
		<supportedTemplateGroups>
			<templateGroup name="Adapter"/>
		</supportedTemplateGroups>
		<dependencies/>

		<task name="SD.Tasks.Adapter.Webservices.SchemaImporter.DirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
				taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description ="Creates the SchemaImporter project folder." isOptional="false">
			<supportedPlatforms>
				<platform name=".NET 2.0"/>
				<platform name=".NET 3.0" />
				<platform name=".NET 3.5" />
			</supportedPlatforms>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="SchemaImporter" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.Webservices.SchemaImporter.SchemaImporterClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the SchemaImporter class" isOptional="false">
			<supportedPlatforms>
				<platform name=".NET 2.0"/>
				<platform name=".NET 3.0" />
				<platform name=".NET 3.5" />
			</supportedPlatforms>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies>
				<dependency name="SD.Tasks.Adapter.Webservices.SchemaImporter.DirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="SchemaImporter" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="SchemaImporter.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_SchemaImporterTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Adapter.Webservices.SchemaImporter.ProjectCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.ProjectFileCreator" 
			description="Generates the VS.NET project file for the schema importer project. Be sure to place this at the end of the taskgroup." isOptional="false">
			<supportedPlatforms>
				<platform name=".NET 2.0"/>
				<platform name=".NET 3.0" />
				<platform name=".NET 3.5" />
			</supportedPlatforms>
			<supportedTemplateGroups>
				<templateGroup name="Adapter"/>
			</supportedTemplateGroups>
			<dependencies/>
			<parameters>
				<parameter name="destinationFolder" defaultValue="" isOptional ="false" description="The folder to generate the project file in, relative to the destination root folder."/>
				<parameter name="filenameFormat" defaultValue="SchemaImporter.[extension]proj" isOptional="false" description="The project filename format specification."/>
				<parameter name="templateID" defaultValue="SD_VsNet2005AdapterTemplate" isOptional="false" description="The ID of the template to use for the VS.NET project file" valueType="templateID"/>
				<parameter name="useRootNameSpaceForProjectName" defaultValue="true" isOptional="false" description="Flag to signal if the rootnamespace specified should be used for the project name. If set to false, the property projectName has to be specified with the value to use for project name." valueType="boolean"/>
				<parameter name="alterWhenExistent" defaultValue="true" isOptional="true" description="Flag to signal if an existing project file should be altered or should be left alone." valueType="boolean"/>
				<parameter name="binRootFolder" defaultValue="SchemaImporter\" isOptional="true" description="The name of the root folder, relative to the destination root folder, where VS.NET should store the output folders like bin\debug."/>
				<parameter name="clearFileCacheAfterwards" defaultValue="true" isOptional ="true" description="Flag to signal if the filename cache has to be cleared after this task has been run succesfully." valueType="boolean"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="projectName" defaultValue="" isOptional="true" description="The name to use for the project if useRootNameSpaceForProjectName is set to false or left empty. If projectName has been left empty, the ProjectName property value of the LLBLGen Pro project is used instead, if useRootNameSpaceForProjectname is set to false or left empty."/>
			</parameters>
		</task>
	</taskGroup>
</taskGroup>