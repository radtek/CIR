<?xml version="1.0"?>
<taskGroup xmlns="http://sd/llblgen/pro/taskGroupElementDefinitions.xsd"
		name="SD.Tasks.Generic" isOptional ="true" 
		description="General group of tasks which are used by all template groups.">

	<taskGroup name="SD.Tasks.Generic.DirectoryCreators" description="Tasks which create various directories" isOptional="true">
		<task name="SD.Tasks.Generic.EntityClassesDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" isOptional ="true" description ="Creates the Entities folder">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="EntityClasses" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.FactoryClassesDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description="Creates the FactoryClasses folder" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="FactoryClasses" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.HelperClassesDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description="Creates the HelperClasses folder" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="HelperClasses" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.RelationClassesDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description="Creates the RelationClasses folder" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="RelationClasses" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.TypedListClassesDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description="Creates the TypedListClasses folder" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="TypedListClasses" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.TypedViewClassesDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description="Creates the TypedViewClasses folder" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="TypedViewClasses" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.ValidatorClassesDirectoryCreator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.DirectoryCreator" description="Creates the ValidatorClasses folder" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="folderToCreate" defaultValue="ValidatorClasses" isOptional="false" description="The folder to create"/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the folder already exists. Overrules clearWhenExistent" valueType="boolean"/>
				<parameter name="clearWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal if an existing folder has to be cleared first. Overruled by failWhenExistent" valueType="boolean"/>
			</parameters>
		</task>
	</taskGroup>
	
	<taskGroup name="SD.Tasks.Generic.FileCreators" description="Tasks which create various files" isOptional="true">
		<task name="SD.Tasks.Generic.AssemblyInfoFileGenerator" 
		   assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
		   description="Generates the assemblyinfo class" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="destinationFolder" defaultValue="" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="AssemblyInfo.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_AssemblyInfoTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.ConstantsEnumsFileGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the constantsenums file" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="destinationFolder" defaultValue="" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="ConstantsEnums.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_ConstantsEnumsTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.AppConfigFileGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll"
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" isOptional="true" description ="Generates the app.config file">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies/>
			<parameters>
				<parameter name="destinationFolder" defaultValue="" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="App.config" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_AppConfigTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.FieldInfoProviderClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the FieldInfoProvider class" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.Generic.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="FieldInfoProvider.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_FieldInfoProviderTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.TypeDefaultValueClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the TypeDefaultValue class" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.Generic.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="TypeDefaultValue.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_TypeDefaultValueTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.InheritanceInfoProviderClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the InheritanceInfoProvider class" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.Generic.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="InheritanceInfoProvider.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_InheritanceInfoProviderTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.EntityRelationsClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the entity relation classes" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.Generic.RelationClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="RelationClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="[elementName]Relations.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_EntityRelationsTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="allEntities" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.EntityClassesGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
		description="Generates the entity classes." isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.EntityClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="EntityClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="[elementName]Entity.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_EntityTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="allEntities" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.EntityFactoryClassesGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the Entity class factories" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.FactoryClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="FactoryClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="EntityFactories.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_EntityFactoriesTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.EntityFieldFactoryClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the entityfield class factories" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.FactoryClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="FactoryClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="EntityFieldFactory.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_EntityFieldFactoryTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.EntityFieldsFactoryClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the entityfields class factories" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.FactoryClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="FactoryClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="EntityFieldsFactory.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_EntityFieldsFactoryTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.PredicateFactoryClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the PredicateExpressionFactory class. For backwards compatibility." isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.FactoryClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="FactoryClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="PredicateFactory.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_PredicateFactoryTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.SortClauseFactoryClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the SortClauseFactory class. For backwards compatibility." isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.FactoryClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="FactoryClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="SortClauseFactory.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_SortClauseFactoryTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.PersistenceInfoProviderClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the PersistenceInfoProvider class" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="PersistenceInfoProvider.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_PersistenceInfoProviderTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.ResultsetFieldsClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter"
			description="Generates the ResultsetFields class" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="ResultsetFields.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_ResultsetFieldsTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.FieldCreationClassesGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
		   taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the classes to create entityfield objects easily" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GenericTasks.HelperClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="HelperClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="FieldCreationClasses.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_FieldCreationClassesTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.ActionProceduresClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the class which contains the calls to action procedures" 
			isOptional="true">
			<supportedPlatforms>
				<platform name=".NET 1.0"/>
				<platform name=".NET 1.1"/>
				<platform name=".NET 2.0"/>
				<platform name=".NET 3.0" />
				<platform name=".NET 3.5" />
			</supportedPlatforms>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.SelfServicing.StoredProcedureCallerClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="StoredProcedureCallerClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="ActionProcedures.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_ActionProceduresTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.RetrievalProceduresClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the class which contains the calls to retrieval procedures" 
			isOptional="true">
			<supportedPlatforms>
				<platform name=".NET 1.0"/>
				<platform name=".NET 1.1"/>
				<platform name=".NET 2.0"/>
				<platform name=".NET 3.0" />
				<platform name=".NET 3.5" />
			</supportedPlatforms>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.SelfServicing.StoredProcedureCallerClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="StoredProcedureCallerClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="RetrievalProcedures.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_RetrievalProceduresTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="generic" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.TypedListClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the TypedList classes" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GeneralTasks.TypedListClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="TypedListClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="[elementName]TypedList.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_TypedListTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="allTypedLists" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.TypedViewClassGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the TypedView classes" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GeneralTasks.TypedViewClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="TypedViewClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="[elementName]TypedView.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_TypedViewTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="allTypedViews" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
		<task name="SD.Tasks.Generic.ValidatorClassesGenerator" assemblyFilename="SD.LLBLGen.Pro.TaskPerformers.dll" 
			taskPerformerClass="SD.LLBLGen.Pro.TaskPerformers.CodeEmitter" description="Generates the field validation classes" isOptional="true">
			<supportedPlatforms/>
			<supportedTemplateGroups/>
			<dependencies>
				<dependency name="SD.Tasks.GeneralTasks.ValidatorClassesDirectoryCreator"/>
			</dependencies>
			<parameters>
				<parameter name="destinationFolder" defaultValue="ValidatorClasses" isOptional="false" description="The folder to generate the code in"/>
				<parameter name="filenameFormat" defaultValue="[elementName]Validator.[extension]" isOptional="false" description="The destination file format specification"/>
				<parameter name="templateID" defaultValue="SD_EntityValidatorTemplate" isOptional="false" description="The ID of the template to use." valueType="templateID"/>
				<parameter name="emitType" defaultValue="allEntities" isOptional="false" description="The type of code generation to perform." valueType="emitType"/>
				<parameter name="templateBindingDefinitionName" defaultValue="" isOptional="true" description="The name of the TemplateBindings from which to pick the templateID specified. Specifying this parameter will always force the templateID to be picked from the templateBindings with the name specified."/>
				<parameter name="failWhenExistent" defaultValue="false" isOptional="true" description="Flag to signal what to do when the destination file already exists." valueType="boolean"/>
			</parameters>
		</task>
	</taskGroup>
</taskGroup>
