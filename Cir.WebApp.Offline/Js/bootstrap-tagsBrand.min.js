
(function ($) {
    "use strict";

    var defaults = {
        values: [],
        values_url: '',

        templates: {
            pill: '<span class="badge badge-info tag-badge">{0}</span>',
            add_pill: '<span class="tag-form" title="Click to Assign new role to User."></span>',
            input_pill: '<span class="tag-form input-append"></span>',
            number: ' <sup><small>{0}</small></sup>',
            plus_icon: '<button class="btn btn-default btn-extrasm"><i class="icon-plus-sign" style="margin-top:-4px"></i></button>',
            delete_icon: '<i class="icon-remove-sign tag-icon" title="Click to unassign this role from User."></i>',
            ok_icon: '<i class="icon-ok-sign tag-icon"></i>'
        },

        limit: 0,

        tag_link_target: '', // may be _blank or other.

        can_delete: true,
        can_add: true,

        double_hilight: '#0B3549',

        input_name: 'tags[]',

        lang: {
            delete: "Delete",
            limit: "You have reached limit of only {0} tags to be added."
        },

        suggestion_limit: 15,
        suggestion_url: '',
        suggestions: [],

        only_suggestions: false,

        remove_url: '',

        onLoadDefaults: function (values) {
            return values;
        },
        onRemove: function (pill) {
        },
        onError: function (num, msg) {
            alert(msg);
        },
        onBeforeAdd: function (pill, value) {
            return pill;
        },
        onLoadSuggestions: function (values) {
            return values;
        },
        onDuplicate: null,
        onBeforeRemove: function (pill) {
            return true;
        }
    }


    function Tags(context, params) {

        this.options = $.extend(true, {}, defaults, params);

        var $self = this;

        if ($self.options.values_url) {
            $.ajax({
                dataType: 'json', type: 'get', async: false, url: $self.options.values_url
            }).done(function (json) {
                if (typeof json == "object") {
                    $self.options.values = $.merge($self.options.values, json);
                }
            });
        }
        $self.options.values = $self.options.onLoadDefaults($self.options.values);

        var pills_list = $(document.createElement('span')).addClass('pills-list').appendTo(context);

        $self.options.values = $self._prepare($self.options.values);
        $.each($self.options.values, function (key, value) {
            $self.addTag(pills_list, value);
        });

        if ($self.options.can_add) {

            var labels = [], mapped = [];

            var input = $(document.createElement('input'))
                .addClass('tag-input')
                .attr({ "autocomplete": "off", "type": "text", "placeholder": "Please enter Role Name" })
                .css('outline', 'none')
                .typeahead({
                    items: $self.options.suggestion_limit,
                    source: function (query, process) {

                        var suggestions = $.merge([], $self.options.suggestions);
                        labels = [];
                        mapped = {};

                        if ($self.options.suggestion_url) {
                            $.ajax({
                                dataType: 'json', type: 'post', async: false, url: $self.options.suggestion_url,
                                data: { q: query, limit: $self.options.suggestion_limit }
                            }).done(function (json) {
                                if (typeof json == "object") {
                                    suggestions = $.merge(suggestions, json);
                                }
                            });
                        }

                        suggestions = $self.options.onLoadSuggestions(suggestions);
                        suggestions = $self._prepare(suggestions);

                        $.each(suggestions, function (i, item) {
                            mapped[item.suggest] = item
                            labels.push(item.suggest)
                        });

                        return labels;
                    },
                    updater: function (item) {
                        $self._addTag(pills_list, input, mapped[item]);
                    }
                })
                .click(function (e) {
                    e.stopPropagation();
                });

            if ($self.options.only_suggestions == false) {
                input.keypress(function (e) {
                    if (!$(this).val()) return;
                    if (e.keyCode == 13) {
                        //if ($(this).val() == "Admin" || $(this).val() == "Editor" || $(this).val() == "Reader") {
                        //    $self._addTag(pills_list, $(this));
                        //}
                        //else {
                        $(this).val("")

                        //}
                        return false;
                    }
                });
            }



            var add = $($self.options.templates.input_pill)
                .append(input)
                .append($($self.options.templates.ok_icon)
                    .css('cursor', 'pointer')
                    .click(function (e) {
                        e.stopPropagation();
                        $self._addTag(pills_list, input);
                        input.focus();
                    })
                )
                .hide()
                .appendTo(context);

            var wait = $($self.options.templates.add_pill)
                .addClass('add-pill')
                .css('cursor', 'pointer')
                .append($(document.createElement('span'))
                    .attr({})
                    .addClass('tag-add')
                    .append($self.options.templates.plus_icon)
                )
                .click(function (e) {
                    add.show();
                    input.focus();
                    var $this = $(this);
                    $this.hide();

                    setTimeout(function () {
                        $('body').one('click', function () {
                            add.hide();
                            $this.show();
                        });
                    }, 200);

                })
                .appendTo(context);
        }
    }


    Tags.prototype._prepare = function (values) {

        $.each(values, function (key, value) {
            if (!value) {
                delete values[key];
                return true;
            }
            if (typeof value == "string") {
                values[key] = { id: value, text: value, suggest: value };
            }
            values[key].suggest = values[key].suggest || values[key].text;
            values[key].url = value.url || '';
            values[key].title = value.title || '';
            values[key].num = parseInt(value.num || '0');
        });
        return values;
    }
    Tags.prototype._addTag = function (pills_list, input, value) {

        if (!value) {
            value = this._prepare([input.val()])[0];
        }

        if (this.addTag(pills_list, value)) {
            input.val('').focus();
        }
    }
    Tags.prototype.addTag = function (pills_list, value) {
        var $self = this;

        if (!value) return false;

        if (parseInt($self.options.limit) > 0 && pills_list.children().length >= parseInt($self.options.limit)) {
            $self.options.onError(10, $self.options.lang.limit.format($self.options.limit));
            return false;
        }

        if (typeof value.id === 'undefined' || typeof value.text === 'undefined') {
            $self.options.onError(11, 'Not correct object format to create tag/pill');
            $.error('Not correct object format to create tag/pill');
        }

        var unique = '';
        $.each(pills_list.children(), function (key, val) {
            if (value.id.toString().toLowerCase() == $(val).data('tag-id').toString().toLowerCase()) {
                unique = $(val);
                return false;
            }
        });

        if (unique) {
            if (!$self.options.onDuplicate) {
                var color = $(pills_list.children()[0]).css('background-color');
                unique.stop().animate({ "backgroundColor": $self.options.double_hilight }, 100, 'swing', function () {
                    unique.stop().animate({ "backgroundColor": color }, 100, 'swing', function () {
                        unique.css('background-color', '');
                    });
                });
                return false;
            } else {
                if ($self.options.onDuplicate(unique, value) != true) {
                    return false;
                }
            }
        }

        if (value.url) {
            var title = value.title ? ' data-toggle="tooltip" title="' + value.title + '"' : '';
            value.text = '<a class="tag-link" ' + title + ' target="' + $self.options.tag_link_target + '" href="' + value.url + '">' + value.text + '</a>';
        }

        var icon = '';
        if ($self.options.can_delete) {
            icon = $(document.createElement('a'))
                .attr({
                    "href": "javascript:void(0)",
                    "class": "tag-remove"
                })
                .html($self.options.templates.delete_icon.toString())
                .click(function (e) { //JJ Updated for confirm remove
                    e.stopPropagation();
                    eBrandObj.t = $self;
                    eBrandObj.el = this;
                    eBrandObj.v = value;

                    DeleteThisBrand(eBrandObj);
                });
        }

        var num = value.num > 0 ? $self.options.templates.number.format(value.num) : '';

        var tag = $($self.options.templates.pill.format(value.text))
            .attr('data-tag-id', value.id)
            .addClass("class_" + value.value)
            .append(num, icon, $(document.createElement('input'))
                .attr({
                    "data-tag-hidden": value.id,
                    "name": $self.options.input_name,
                    "type": "hidden",
                    "value": value.id
                })
            )
            .css({
                "overflow": "hidden",
                "white-space": "nowrap"
            });

        tag = $self.options.onBeforeAdd(tag, value);

        pills_list.append(tag);

        $('[data-toggle="tooltip"]').tooltip();

        return true;
    }

    Tags.prototype.removeTag = function (tag) {
        var $self = this;
        var $tag = $(tag).closest('[data-tag-id]');

        if ($self.options.onBeforeRemove($tag) === false) {
            return;
        }

        $tag.animate({ width: 0, "padding-right": 0, "padding-left": 0 }, 200, 'swing', function () {
            var $this = $(this);
            if ($self.options.remove_url) {
                $.ajax({
                    dataType: 'json', type: 'post', async: false, url: $self.options.remove_url, data: { id: $this.data('tag-id') }
                });
            }
            $self.options.onRemove($this);
            $this.remove();
        });
    }

    $.fn.brandTags = function (params) {
        return this.each(function () {
            new Tags($(this), params);
        })
    }
}(window.jQuery));

if (!String.prototype.format) {
    String.prototype.format = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined' ? args[number] : match;
        });
    };
};




!function ($) {

    "use strict"; // jshint ;_;


    /* TYPEAHEAD PUBLIC CLASS DEFINITION
     * ================================= */

    var Typeahead = function (element, options) {
        this.$element = $(element)
        this.options = $.extend({}, $.fn.typeahead.defaults, options)
        this.matcher = this.options.matcher || this.matcher
        this.sorter = this.options.sorter || this.sorter
        this.highlighter = this.options.highlighter || this.highlighter
        this.updater = this.options.updater || this.updater
        this.source = this.options.source
        this.$menu = $(this.options.menu)
        this.shown = false
        this.listen()
    }

    Typeahead.prototype = {

        constructor: Typeahead

        , select: function () {
            var val = this.$menu.find('.active').attr('data-value')
            this.$element
                .val(this.updater(val))
                .change()
            return this.hide()
        }

        , updater: function (item) {
            return item
        }

        , show: function () {
            var pos = $.extend({}, this.$element.position(), {
                height: this.$element[0].offsetHeight
            })

            this.$menu
                .insertAfter(this.$element)
                .css({
                    top: pos.top + pos.height
                    , left: pos.left
                })
                .show()

            this.shown = true
            return this
        }

        , hide: function () {
            this.$menu.hide()
            this.shown = false
            return this
        }

        , lookup: function (event) {
            var items

            this.query = this.$element.val()

            if (!this.query || this.query.length < this.options.minLength) {
                return this.shown ? this.hide() : this
            }

            items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source

            return items ? this.process(items) : this
        }

        , process: function (items) {
            var that = this

            items = $.grep(items, function (item) {
                return that.matcher(item)
            })

            items = this.sorter(items)

            if (!items.length) {
                return this.shown ? this.hide() : this
            }

            return this.render(items.slice(0, this.options.items)).show()
        }

        , matcher: function (item) {
            return ~item.toLowerCase().indexOf(this.query.toLowerCase())
        }

        , sorter: function (items) {
            var beginswith = []
                , caseSensitive = []
                , caseInsensitive = []
                , item

            while (item = items.shift()) {
                if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item)
                else if (~item.indexOf(this.query)) caseSensitive.push(item)
                else caseInsensitive.push(item)
            }

            return beginswith.concat(caseSensitive, caseInsensitive)
        }

        , highlighter: function (item) {
            var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
            return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                return '<strong>' + match + '</strong>'
            })
        }

        , render: function (items) {
            var that = this

            items = $(items).map(function (i, item) {
                i = $(that.options.item).attr('data-value', item)
                i.find('a').html(that.highlighter(item))
                return i[0]
            })

            items.first().addClass('active')
            this.$menu.html(items)
            return this
        }

        , next: function (event) {
            var active = this.$menu.find('.active').removeClass('active')
                , next = active.next()

            if (!next.length) {
                next = $(this.$menu.find('li')[0])
            }

            next.addClass('active')
        }

        , prev: function (event) {
            var active = this.$menu.find('.active').removeClass('active')
                , prev = active.prev()

            if (!prev.length) {
                prev = this.$menu.find('li').last()
            }

            prev.addClass('active')
        }

        , listen: function () {
            this.$element
                .on('focus', $.proxy(this.focus, this))
                .on('blur', $.proxy(this.blur, this))
                .on('keypress', $.proxy(this.keypress, this))
                .on('keyup', $.proxy(this.keyup, this))

            if (this.eventSupported('keydown')) {
                this.$element.on('keydown', $.proxy(this.keydown, this))
            }

            this.$menu
                .on('click', $.proxy(this.click, this))
                .on('mouseenter', 'li', $.proxy(this.mouseenter, this))
                .on('mouseleave', 'li', $.proxy(this.mouseleave, this))
        }

        , eventSupported: function (eventName) {
            var isSupported = eventName in this.$element
            if (!isSupported) {
                this.$element.setAttribute(eventName, 'return;')
                isSupported = typeof this.$element[eventName] === 'function'
            }
            return isSupported
        }

        , move: function (e) {
            if (!this.shown) return

            switch (e.keyCode) {
                case 9: // tab
                case 13: // enter
                case 27: // escape
                    e.preventDefault()
                    break

                case 38: // up arrow
                    e.preventDefault()
                    this.prev()
                    break

                case 40: // down arrow
                    e.preventDefault()
                    this.next()
                    break
            }

            e.stopPropagation()
        }

        , keydown: function (e) {
            this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27])
            this.move(e)
        }

        , keypress: function (e) {
            if (this.suppressKeyPressRepeat) return
            this.move(e)
        }

        , keyup: function (e) {
            switch (e.keyCode) {
                case 40: // down arrow
                case 38: // up arrow
                case 16: // shift
                case 17: // ctrl
                case 18: // alt
                    break

                case 9: // tab
                case 13: // enter
                    if (!this.shown) return
                    this.select()
                    break

                case 27: // escape
                    if (!this.shown) return
                    this.hide()
                    break

                default:
                    this.lookup()
            }

            e.stopPropagation()
            e.preventDefault()
        }

        , focus: function (e) {
            this.focused = true
        }

        , blur: function (e) {
            this.focused = false
            if (!this.mousedover && this.shown) this.hide()
        }

        , click: function (e) {
            e.stopPropagation()
            e.preventDefault()
            this.select()
            this.$element.focus()
        }

        , mouseenter: function (e) {
            this.mousedover = true
            this.$menu.find('.active').removeClass('active')
            $(e.currentTarget).addClass('active')
        }

        , mouseleave: function (e) {
            this.mousedover = false
            if (!this.focused && this.shown) this.hide()
        }

    }


    /* TYPEAHEAD PLUGIN DEFINITION
     * =========================== */

    var old = $.fn.typeahead

    $.fn.typeahead = function (option) {
        return this.each(function () {
            var $this = $(this)
                , data = $this.data('typeahead')
                , options = typeof option == 'object' && option
            if (!data) $this.data('typeahead', (data = new Typeahead(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    $.fn.typeahead.defaults = {
        source: []
        , items: 8
        , menu: '<ul class="typeahead dropdown-menu"></ul>'
        , item: '<li><a href="#"></a></li>'
        , minLength: 1
    }

    $.fn.typeahead.Constructor = Typeahead


    /* TYPEAHEAD NO CONFLICT
     * =================== */

    $.fn.typeahead.noConflict = function () {
        $.fn.typeahead = old
        return this
    }


    /* TYPEAHEAD DATA-API
     * ================== */

    $(document).on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
        var $this = $(this)
        if ($this.data('typeahead')) return
        $this.typeahead($this.data())
    })

}(window.jQuery);