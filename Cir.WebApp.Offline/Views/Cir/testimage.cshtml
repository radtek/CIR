@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>

    <meta name="viewport" content="width=device-width" />
    <script src="../Js/jquery-1.10.1.min.js"></script>
  
    <style>
        .thumb {
            height: 75px;
            border: 1px solid #000;
            margin: 10px 5px 0 0;
        }
    </style>
    @*<script src="../Js/fine-uploader/fine-uploader.js"></script>
        <link href="../Js/fine-uploader/fine-uploader-new.css" rel="stylesheet" />

        <script type="text/template" id="qq-template-manual-trigger">
            <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="Drop files here">
                <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
                    <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
                </div>
                <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                    <span class="qq-upload-drop-area-text-selector"></span>
                </div>
                <div class="buttons">
                    <div class="qq-upload-button-selector qq-upload-button">
                        <div>Select files</div>
                    </div>
                    <button type="button" id="trigger-upload" class="btn btn-primary">
                        <i class="icon-upload icon-white"></i> Upload
                    </button>
                </div>
                <span class="qq-drop-processing-selector qq-drop-processing">
                    <span>Processing dropped files...</span>
                    <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                </span>
                <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
                    <li>
                        <div class="qq-progress-bar-container-selector">
                            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                        </div>
                        <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                        <img class="qq-thumbnail-selector" qq-max-size="1000" style="max-width:100px">
                        <span class="qq-upload-file-selector qq-upload-file"></span>
                        <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                        <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                        <span class="qq-upload-size-selector qq-upload-size"></span>
                        <button type="button" class="qq-btn qq-upload-cancel-selector qq-upload-cancel">Cancel</button>
                        <button type="button" class="qq-btn qq-upload-retry-selector qq-upload-retry">Retry</button>
                        <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">Delete</button>
                        <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
                    </li>
                </ul>

                <dialog class="qq-alert-dialog-selector">
                    <div class="qq-dialog-message-selector"></div>
                    <div class="qq-dialog-buttons">
                        <button type="button" class="qq-cancel-button-selector">Close</button>
                    </div>
                </dialog>

                <dialog class="qq-confirm-dialog-selector">
                    <div class="qq-dialog-message-selector"></div>
                    <div class="qq-dialog-buttons">
                        <button type="button" class="qq-cancel-button-selector">No</button>
                        <button type="button" class="qq-ok-button-selector">Yes</button>
                    </div>
                </dialog>

                <dialog class="qq-prompt-dialog-selector">
                    <div class="qq-dialog-message-selector"></div>
                    <input type="text">
                    <div class="qq-dialog-buttons">
                        <button type="button" class="qq-cancel-button-selector">Cancel</button>
                        <button type="button" class="qq-ok-button-selector">Ok</button>
                    </div>
                </dialog>
            </div>
        </script>

        <style>
            #trigger-upload {
                color: white;
                background-color: #00ABC7;
                font-size: 14px;
                padding: 7px 20px;
                background-image: none;
            }

            #fine-uploader-manual-trigger .qq-upload-button {
                margin-right: 15px;
            }

            #fine-uploader-manual-trigger .buttons {
                width: 36%;
            }

            #fine-uploader-manual-trigger .qq-uploader .qq-total-progress-bar-container {
                width: 60%;
            }
        </style>*@

    <title>testimage</title>

</head>
<body>

    @*<!-- Fine Uploader DOM Element
         ====================================================================== -->
        <div id="fine-uploader-manual-trigger"></div>

        <!-- Your code to create an instance of Fine Uploader and bind to the DOM/template
        ====================================================================== -->
        <script>
            var manualUploader = new qq.FineUploader({
                element: document.getElementById('fine-uploader-manual-trigger'),
                template: 'qq-template-manual-trigger',
                request: {
                    endpoint: '/server/uploads'
                },
                thumbnails: {
                    placeholders: {
                        waitingPath: '/Js/fine-uploader/placeholders/waiting-generic.png',
                        notAvailablePath: '/Js/fine-uploader/placeholders/not_available-generic.png'
                    }
                },
                autoUpload: false,
                debug: true
            });

            qq(document.getElementById("trigger-upload")).attach("click", function () {
                manualUploader.uploadStoredFiles();
            });
        </script>*@

    <input type="file" id="files" name="files[]" multiple> <input type="button" id="btnjson" value="Get Json" />
    <div id="list">

    </div>
    <script type="text/javascript">

        var FileToUpload = [];

        function handleFileSelect(evt) {
            var files = evt.target.files; // FileList object

            // Loop through the FileList and render image files as thumbnails.
            for (var i = 0, f; f = files[i]; i++) {

                // Only process image files.
                if (!f.type.match('image.*')) {
                    continue;
                }
               // var img = document.createElement("img");
                var reader = new FileReader();
              
                // Closure to capture the file information.
                reader.onload = (function (theFile, idx) {
                    return function (e) {
                       
                        FileToUpload.push(theFile);
                        var idstr = FileToUpload.indexOf(theFile);

                        // Render thumbnail.
                        var imageObj = new Image();
                        imageObj.onload = (function(tf,idx) {
                            return function () {
                            var canvas = document.createElement("canvas");
                            var MAX_WIDTH = 100;
                            var MAX_HEIGHT = 100;
                            var width = imageObj.width;
                            var height = imageObj.height;

                            if (width > height) {
                                if (width > MAX_WIDTH) {
                                    height *= MAX_WIDTH / width;
                                    width = MAX_WIDTH;
                                }
                            } else {
                                if (height > MAX_HEIGHT) {
                                    width *= MAX_HEIGHT / height;
                                    height = MAX_HEIGHT;
                                }
                            }
                            canvas.width = width;
                            canvas.height = height;
                            var ctx = canvas.getContext("2d");
                            ctx.drawImage(imageObj, 0, 0, width, height);

                            var dataurl = canvas.toDataURL("image/jpeg");

                            var span = document.createElement('span');
                            span.setAttribute('data-fileid', idx);
                            var desc = document.createElement('input');

                            desc.type = "text";
                            desc.name = "desc";
                            desc.className = "desc";
                            var order = document.createElement('input');
                            order.type = "number";
                            order.name = "order";
                            order.className = "order";
                            var del = document.createElement('input');
                            del.type = "button";
                            del.name = "del";
                            del.className = "del";
                            del.value = "x";


                            del.addEventListener('click', handleFileDelete, false);
                            span.innerHTML = ['<img class="thumb" src="', dataurl,
                                              '" title="', escape(tf.name), '"/>'].join('');
                            span.appendChild(desc);
                            span.appendChild(order);
                            span.appendChild(del);

                            //document.getElementById('list').insertBefore(span, null);
                            document.getElementById('list').appendChild(span);
                            document.getElementById('list').appendChild(document.createElement('br'));
                        };
                        })(theFile, idstr);
                        imageObj.src = e.target.result;                        
                    };
                })(f, i);

                // Read in the image file as a data URL.
                reader.readAsDataURL(f);
            }
        }


        /* Listener for multiple files input element. */
        document.getElementById('files').addEventListener('change', handleFileSelect, false);
        document.getElementById('btnjson').addEventListener('click', getImageData, false);
        function handleFileDelete(evt) {
            var btn = evt.target;
            var idstr = $(btn).parent().data('fileid');
            FileToUpload.splice(idstr, 1);
            $(btn).parent().next('br').remove();
            $(btn).parent().remove();
           
            $('#list').children('span').each(function (index) {
                //$(this).data('fileid', index);
                this.setAttribute('data-fileid', index);
            })
        }
        function getImageData(e)
        {
            GetJsonFromFile(e, function (data) {
                console.log(data);
                console.log(JSON.stringify(data));
            });
        }

        function GetJsonFromFile(e, callback) {
            var ImageList = {
                Images: []
            };
            for (var i = 0, f; f = FileToUpload[i]; i++) {
                var reader = new FileReader();

                // Closure to capture the file information.
                reader.onload = (function (index) {
                    return function (e) {
                        var imageObj = new Image();
                        imageObj.onload = (function (idx) {
                            return function () {
                                var canvas = document.createElement("canvas");
                                var MAX_WIDTH = 1024;
                                var MAX_HEIGHT = 768;
                                var width = imageObj.width;
                                var height = imageObj.height;

                                if (width > height) {
                                    if (width > MAX_WIDTH) {
                                        height *= MAX_WIDTH / width;
                                        width = MAX_WIDTH;
                                    }
                                } else {
                                    if (height > MAX_HEIGHT) {
                                        width *= MAX_HEIGHT / height;
                                        height = MAX_HEIGHT;
                                    }
                                }
                                canvas.width = width;
                                canvas.height = height;
                                var ctx = canvas.getContext("2d");
                                ctx.drawImage(imageObj, 0, 0, width, height);

                                var dataurl = canvas.toDataURL("image/jpeg");
                                var jsonData = {};
                                jsonData['ImageDataString'] = dataurl;
                                var valuecontainer = $('#list span[data-fileid="' + idx + '"]').first();
                                jsonData['ImageDescription'] = $(valuecontainer).find('.desc').val();
                                jsonData['ImageOrder'] = $(valuecontainer).find('.order').val();
                                ImageList.Images.push(jsonData);
                                if (ImageList.Images.length == FileToUpload.length) {
                                    callback(ImageList);
                                }
                                
                            };
                        })(index);
                        imageObj.src = e.target.result;
                        
                    };
                })(i);

                // Read in the image file as a data URL.
                //  reader.readAsBinaryString(f);
                reader.readAsDataURL(f);
            }
        }


    </script>

</body>
</html>
