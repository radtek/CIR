///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: 2.5
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates.NET20
// Templates vendor: Solutions Design.
// Templates version: 
//////////////////////////////////////////////////////////////
using System;
using Cir.Data.LLBLGen;
using Cir.Data.LLBLGen.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Cir.Data.LLBLGen.FactoryClasses
{
	/// <summary>Generates IEntityFields2 instances for different kind of Entities.</summary>
	public partial class EntityFieldsFactory
	{
		/// <summary>Private CTor, no instantiation possible.</summary>
		private EntityFieldsFactory()
		{
		}

		/// <summary>General factory entrance method which will return an EntityFields object with the format generated by the factory specified</summary>
		/// <param name="relatedEntityType">The type of entity the fields are for</param>
		/// <returns>The IEntityFields2 instance requested</returns>
		public static IEntityFields2 CreateEntityFieldsObject(EntityType relatedEntityType)
		{
			IEntityFields2 fieldsToReturn=null;
			IInheritanceInfoProvider inheritanceProvider = InheritanceInfoProviderSingleton.GetInstance();
			IFieldInfoProvider fieldProvider = FieldInfoProviderSingleton.GetInstance();
			switch(relatedEntityType)
			{
				case Cir.Data.LLBLGen.EntityType.ActionOnTransformerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ActionOnTransformerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ActionToBeTakenOnGeneratorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ActionToBeTakenOnGeneratorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ArcDetectionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ArcDetectionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BearingDamageCategoryEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BearingDamageCategoryEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BearingErrorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BearingErrorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BearingErrorVendorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BearingErrorVendorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BearingPosEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BearingPosEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BearingTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BearingTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BirDataEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BirDataEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BirReportPlaceholdersEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BirReportPlaceholdersEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BirWordDocumentEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BirWordDocumentEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BladeColorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BladeColorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BladeDamagePlacementEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BladeDamagePlacementEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BladeEdgeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BladeEdgeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BladeInspectionDataEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BladeInspectionDataEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BladeLengthEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BladeLengthEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BladeManufacturerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BladeManufacturerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BooleanAnswerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BooleanAnswerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.BracketsEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "BracketsEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CableConditionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CableConditionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CimCaseFailureItemsEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CimCaseFailureItemsEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirAttachmentEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirAttachmentEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirCommentHistoryEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirCommentHistoryEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirDataEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirDataEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirinboxTimestampEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirinboxTimestampEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirInvalidEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirInvalidEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirLogEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirMailArchiveEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirMailArchiveEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirMetadataEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirMetadataEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirMetadataLookupEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirMetadataLookupEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirStandardTextsEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirStandardTextsEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirSystemLogEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirSystemLogEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirSystemMonitorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirSystemMonitorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirUserEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirUserEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirViewEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirViewEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CirXmlEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CirXmlEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ClimateEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ClimateEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CoilConditionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CoilConditionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentGroupEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentGroupEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportBladeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportBladeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportBladeDamageEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportBladeDamageEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportBladeRepairRecordEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportBladeRepairRecordEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportGearboxEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportGearboxEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportGeneralEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportGeneralEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportGeneratorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportGeneratorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportMainBearingEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportMainBearingEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportSkiiPEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportSkiiPEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportSkiiPfailedComponentEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportSkiiPfailedComponentEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportSkiiPnewComponentEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportSkiiPnewComponentEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportStateEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportStateEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportTransformerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportTransformerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentInspectionReportTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentInspectionReportTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ComponentUpTowerSolutionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ComponentUpTowerSolutionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ConnectionBarsEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ConnectionBarsEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ControllerTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ControllerTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CountryIsoEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CountryIsoEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.CouplingEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "CouplingEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.DamageEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "DamageEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.DamageDecisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "DamageDecisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.DebrisGearboxEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "DebrisGearboxEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.DebrisOnMagnetEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "DebrisOnMagnetEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.DynamicTableInputEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "DynamicTableInputEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.EditHistoryEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "EditHistoryEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ElectricalPumpEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ElectricalPumpEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.FaultCodeAreaEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "FaultCodeAreaEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.FaultCodeCauseEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "FaultCodeCauseEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.FaultCodeClassificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "FaultCodeClassificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.FaultCodeTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "FaultCodeTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.FilterBlockTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "FilterBlockTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.FirstNotificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "FirstNotificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearboxDefectCategorizationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearboxDefectCategorizationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearboxDefectCategorizationDetailsEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearboxDefectCategorizationDetailsEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearboxManufacturerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearboxManufacturerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearboxPartTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearboxPartTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearboxRevisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearboxRevisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearboxTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearboxTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearDamageCategoryEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearDamageCategoryEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearErrorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearErrorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearErrorVendorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearErrorVendorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GearTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GearTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GenerateCiridEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GenerateCiridEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorBearingDecisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorBearingDecisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorComponentDamageEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorComponentDamageEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorCoverEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorCoverEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorDefectCategorizationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorDefectCategorizationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorDefectCategorization2Entity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorDefectCategorization2Entity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorDefectCategorization2DetailsEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorDefectCategorization2DetailsEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorDriveEndEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorDriveEndEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorManufacturerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorManufacturerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorMiscDecisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorMiscDecisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorNonDriveEndEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorNonDriveEndEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorPhaseOutletDecisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorPhaseOutletDecisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorRotorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorRotorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorRotorDecisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorRotorDecisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorRotorLeadsDecisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorRotorLeadsDecisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.GeneratorStatorDecisionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "GeneratorStatorDecisionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.HotItemEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "HotItemEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.HotItemAdministratorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "HotItemAdministratorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.HousingErrorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "HousingErrorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.HousingErrorVendorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "HousingErrorVendorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.InlineFilterEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "InlineFilterEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.InvalidNotificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "InvalidNotificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.LocationTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "LocationTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.MagnetPosEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "MagnetPosEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.MainBearingErrorLocationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "MainBearingErrorLocationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.MainBearingManufacturerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "MainBearingManufacturerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.MapBirCirEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "MapBirCirEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.MechanicalOilPumpEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "MechanicalOilPumpEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.NoiseEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "NoiseEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.OhmUnitEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "OhmUnitEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.OilLevelEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "OilLevelEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.OilTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "OilTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.OverallGearboxConditionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "OverallGearboxConditionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.PartNameEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "PartNameEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.PdfEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "PdfEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ReceiptNotificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ReceiptNotificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.RejectNotificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "RejectNotificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ReportTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ReportTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SbuEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SbuEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SbunotificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SbunotificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SburejectNotificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SburejectNotificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SearchProfileEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SearchProfileEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SearchProfileDetailEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SearchProfileDetailEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SecondNotificationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SecondNotificationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ServiceReportNumberTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ServiceReportNumberTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ShaftErrorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ShaftErrorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ShaftErrorVendorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ShaftErrorVendorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ShaftTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ShaftTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ShrinkElementEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ShrinkElementEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SkiipackFailureCauseEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SkiipackFailureCauseEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.SurgeArrestorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "SurgeArrestorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TemplateDynamicTableDefEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TemplateDynamicTableDefEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TemplateInfoEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TemplateInfoEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.ThreeMwGearboxesEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "ThreeMwGearboxesEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TowerHeightEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TowerHeightEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TowerTypeEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TowerTypeEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TransformerManufacturerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TransformerManufacturerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineDataEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineDataEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineFrequencyEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineFrequencyEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineManufacturerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineManufacturerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineMarkVersionEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineMarkVersionEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineMatrixEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineMatrixEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineNominelPowerEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineNominelPowerEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineOldEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineOldEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbinePlacementEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbinePlacementEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbinePowerRegulationEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbinePowerRegulationEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineRotorDiameterEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineRotorDiameterEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineRunStatusEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineRunStatusEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineSmallGeneratorEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineSmallGeneratorEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineTemperatureVariantEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineTemperatureVariantEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.TurbineVoltageEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "TurbineVoltageEntity");
					break;
				case Cir.Data.LLBLGen.EntityType.VibrationsEntity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, "VibrationsEntity");
					break;
			}
			return fieldsToReturn;
		}
		
		/// <summary>General method which will return an array of IEntityFieldCore objects, used by the InheritanceInfoProvider. Only the fields defined in the entity are returned, no inherited fields.</summary>
		/// <param name="entityName">the name of the entity to get the fields for. Example: "CustomerEntity"</param>
		/// <returns>array of IEntityFieldCore fields, defined in the entity with the name specified</returns>
		internal static IEntityFieldCore[] CreateFields(string entityName)
		{
			IEntityFieldCore[] toReturn = null;
			IFieldInfoProvider fieldProvider = FieldInfoProviderSingleton.GetInstance();
			switch(entityName)
			{
				default:
					break;
			}
			return toReturn;
		}
		



		#region Included Code

		#endregion
	}
}
