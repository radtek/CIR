//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cir.Sync.Services.Edmx
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CIM_CIREntities : DbContext
    {
        public CIM_CIREntities()
            : base("name=CIM_CIREntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ComponentInspectionReportTransformer> ComponentInspectionReportTransformer { get; set; }
        public DbSet<ComponentInspectionReportSkiiPFailedComponent> ComponentInspectionReportSkiiPFailedComponent { get; set; }
        public DbSet<ComponentInspectionReportSkiiPNewComponent> ComponentInspectionReportSkiiPNewComponent { get; set; }
        public DbSet<TurbineData> TurbineData { get; set; }
        public DbSet<ComponentInspectionReportGeneral> ComponentInspectionReportGeneral { get; set; }
        public DbSet<ComponentInspectionReportMainBearing> ComponentInspectionReportMainBearing { get; set; }
        public DbSet<CirData> CirData { get; set; }
        public DbSet<CirStandardTexts> CirStandardTexts { get; set; }
        public DbSet<ComponentInspectionReportType> ComponentInspectionReportType { get; set; }
        public DbSet<DynamicTableInput> DynamicTableInput { get; set; }
        public DbSet<CirSystemLog> CirSystemLog { get; set; }
        public DbSet<CirSyncLog> CirSyncLog { get; set; }
        public DbSet<BirData> BirData { get; set; }
        public DbSet<BirWordDocument> BirWordDocument { get; set; }
        public DbSet<CirFieldMappings> CirFieldMappings { get; set; }
        public DbSet<CirLog> CirLog { get; set; }
        public DbSet<CirAttachment> CirAttachment { get; set; }
        public DbSet<CirCommentHistory> CirCommentHistory { get; set; }
        public DbSet<BearingType> BearingType { get; set; }
        public DbSet<BladeColor> BladeColor { get; set; }
        public DbSet<BladeLength> BladeLength { get; set; }
        public DbSet<EditHistory> EditHistory { get; set; }
        public DbSet<HotItem> HotItem { get; set; }
        public DbSet<PDF> PDF { get; set; }
        public DbSet<ReceiptNotification> ReceiptNotification { get; set; }
        public DbSet<RejectNotification> RejectNotification { get; set; }
        public DbSet<ReportType> ReportType { get; set; }
        public DbSet<SBUNotification> SBUNotification { get; set; }
        public DbSet<SBURejectNotification> SBURejectNotification { get; set; }
        public DbSet<SecondNotification> SecondNotification { get; set; }
        public DbSet<SBU> SBU { get; set; }
        public DbSet<CountryISO> CountryISO { get; set; }
        public DbSet<CirMailArchive> CirMailArchive { get; set; }
        public DbSet<BladeManufacturer> BladeManufacturer { get; set; }
        public DbSet<GearboxManufacturer> GearboxManufacturer { get; set; }
        public DbSet<GeneratorManufacturer> GeneratorManufacturer { get; set; }
        public DbSet<MainBearingManufacturer> MainBearingManufacturer { get; set; }
        public DbSet<TurbineManufacturer> TurbineManufacturer { get; set; }
        public DbSet<TurbineMatrix> TurbineMatrix { get; set; }
        public DbSet<Turbine> Turbine { get; set; }
        public DbSet<TransformerManufacturer> TransformerManufacturer { get; set; }
        public DbSet<FeedbackType> FeedbackType { get; set; }
        public DbSet<Severity> Severity { get; set; }
        public DbSet<ImageData> ImageData { get; set; }
        public DbSet<CirFeedback> CirFeedback { get; set; }
        public DbSet<CirServiceInformation> CirServiceInformation { get; set; }
        public DbSet<ImageDataInfo> ImageDataInfo { get; set; }
        public DbSet<ComponentInspectionReportSkiiP> ComponentInspectionReportSkiiP { get; set; }
        public DbSet<ServiceReportNumberType> ServiceReportNumberType { get; set; }
        public DbSet<GenerateCIRId> GenerateCIRId { get; set; }
        public DbSet<ComponentInspectionReportGearbox> ComponentInspectionReportGearbox { get; set; }
        public DbSet<ComponentInspectionReportGenerator> ComponentInspectionReportGenerator { get; set; }
        public DbSet<CirJson> CirJson { get; set; }
        public DbSet<BladeDamagePlacement> BladeDamagePlacement { get; set; }
        public DbSet<BladeEdge> BladeEdge { get; set; }
        public DbSet<BladeInspectionData> BladeInspectionData { get; set; }
        public DbSet<CIMCase> CIMCase { get; set; }
        public DbSet<OtherManufacturer> OtherManufacturer { get; set; }
        public DbSet<CIRMigrationLog> CIRMigrationLog { get; set; }
        public DbSet<FirstNotification> FirstNotification { get; set; }
        public DbSet<ComponentInspectionReportBladeRepairRecord> ComponentInspectionReportBladeRepairRecord { get; set; }
        public DbSet<GirData> GirData { get; set; }
        public DbSet<GirWordDocument> GirWordDocument { get; set; }
        public DbSet<GBXirData> GBXirData { get; set; }
        public DbSet<GBXirWordDocument> GBXirWordDocument { get; set; }
        public DbSet<CirView> CirView { get; set; }
        public DbSet<DynamicDecisionDetails> DynamicDecisionDetails { get; set; }
        public DbSet<DynamicControlTypes> DynamicControlTypes { get; set; }
        public DbSet<DynamicFieldsName> DynamicFieldsName { get; set; }
        public DbSet<DynamicFieldsValue> DynamicFieldsValue { get; set; }
        public DbSet<TemplateDynamicTableDef> TemplateDynamicTableDef { get; set; }
        public DbSet<ComponentInspectionReportBladeDamage> ComponentInspectionReportBladeDamage { get; set; }
        public DbSet<ComponentInspectionReportBlade> ComponentInspectionReportBlade { get; set; }
        public DbSet<ComponentInspectionReport> ComponentInspectionReport { get; set; }
    
        public virtual int TurbineDataGet(string turbineId, ObjectParameter turbineMatrixId, ObjectParameter turbine, ObjectParameter frequency, ObjectParameter manufacturer, ObjectParameter markVersion, ObjectParameter nominelPower, ObjectParameter nominelPowerId, ObjectParameter placement, ObjectParameter powerRegulation, ObjectParameter rotorDiameter, ObjectParameter smallGenerator, ObjectParameter temperatureVariant, ObjectParameter voltage, ObjectParameter countryIsoId, ObjectParameter country, ObjectParameter site, ObjectParameter localTurbineId)
        {
            var turbineIdParameter = turbineId != null ?
                new ObjectParameter("TurbineId", turbineId) :
                new ObjectParameter("TurbineId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TurbineDataGet", turbineIdParameter, turbineMatrixId, turbine, frequency, manufacturer, markVersion, nominelPower, nominelPowerId, placement, powerRegulation, rotorDiameter, smallGenerator, temperatureVariant, voltage, countryIsoId, country, site, localTurbineId);
        }
    
        public virtual ObjectResult<Stp_Search_CirQuick_Result> Stp_Search_CirQuick(Nullable<long> componentInspectionReportTypeId, Nullable<long> reportTypeId, Nullable<long> cIMCaseNumber, Nullable<long> turbineNumber)
        {
            var componentInspectionReportTypeIdParameter = componentInspectionReportTypeId.HasValue ?
                new ObjectParameter("ComponentInspectionReportTypeId", componentInspectionReportTypeId) :
                new ObjectParameter("ComponentInspectionReportTypeId", typeof(long));
    
            var reportTypeIdParameter = reportTypeId.HasValue ?
                new ObjectParameter("ReportTypeId", reportTypeId) :
                new ObjectParameter("ReportTypeId", typeof(long));
    
            var cIMCaseNumberParameter = cIMCaseNumber.HasValue ?
                new ObjectParameter("CIMCaseNumber", cIMCaseNumber) :
                new ObjectParameter("CIMCaseNumber", typeof(long));
    
            var turbineNumberParameter = turbineNumber.HasValue ?
                new ObjectParameter("TurbineNumber", turbineNumber) :
                new ObjectParameter("TurbineNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Stp_Search_CirQuick_Result>("Stp_Search_CirQuick", componentInspectionReportTypeIdParameter, reportTypeIdParameter, cIMCaseNumberParameter, turbineNumberParameter);
        }
    
        public virtual ObjectResult<spGetStandardText_Result> spGetStandardText(Nullable<int> componentInspectionReportTypeId, Nullable<int> pagenumber, Nullable<int> pagesize)
        {
            var componentInspectionReportTypeIdParameter = componentInspectionReportTypeId.HasValue ?
                new ObjectParameter("ComponentInspectionReportTypeId", componentInspectionReportTypeId) :
                new ObjectParameter("ComponentInspectionReportTypeId", typeof(int));
    
            var pagenumberParameter = pagenumber.HasValue ?
                new ObjectParameter("pagenumber", pagenumber) :
                new ObjectParameter("pagenumber", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStandardText_Result>("spGetStandardText", componentInspectionReportTypeIdParameter, pagenumberParameter, pagesizeParameter);
        }
    
        public virtual ObjectResult<spGetStandardTexts_Result> spGetStandardTexts(Nullable<int> componentInspectionReportTypeId)
        {
            var componentInspectionReportTypeIdParameter = componentInspectionReportTypeId.HasValue ?
                new ObjectParameter("ComponentInspectionReportTypeId", componentInspectionReportTypeId) :
                new ObjectParameter("ComponentInspectionReportTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStandardTexts_Result>("spGetStandardTexts", componentInspectionReportTypeIdParameter);
        }
    
        public virtual ObjectResult<spGetCirDataDetails_Result> spGetCirDataDetails(Nullable<long> cirDataId)
        {
            var cirDataIdParameter = cirDataId.HasValue ?
                new ObjectParameter("CirDataId", cirDataId) :
                new ObjectParameter("CirDataId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCirDataDetails_Result>("spGetCirDataDetails", cirDataIdParameter);
        }
    
        public virtual ObjectResult<spGetCirDataDetail_Result> spGetCirDataDetail(Nullable<long> cirDataId)
        {
            var cirDataIdParameter = cirDataId.HasValue ?
                new ObjectParameter("CirDataId", cirDataId) :
                new ObjectParameter("CirDataId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCirDataDetail_Result>("spGetCirDataDetail", cirDataIdParameter);
        }
    
        public virtual ObjectResult<GetBirDataByCirIDs_Result> GetBirDataByCirIDs(string strCirIDs)
        {
            var strCirIDsParameter = strCirIDs != null ?
                new ObjectParameter("StrCirIDs", strCirIDs) :
                new ObjectParameter("StrCirIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBirDataByCirIDs_Result>("GetBirDataByCirIDs", strCirIDsParameter);
        }
    
        public virtual ObjectResult<GetServiceInformation_Result> GetServiceInformation(string isViewed)
        {
            var isViewedParameter = isViewed != null ?
                new ObjectParameter("IsViewed", isViewed) :
                new ObjectParameter("IsViewed", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceInformation_Result>("GetServiceInformation", isViewedParameter);
        }
    }
}
